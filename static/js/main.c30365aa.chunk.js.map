{"version":3,"sources":["components/Info.jsx","components/Form.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Info","props","details","summed","sum","el","counterObj","hasOwnProperty","parseFloat","Fragment","className","Object","entries","map","index","item","count","key","form","handleChange","e","preventDefault","setState","amount","target","value","hanleClicked","setTimeout","noteCounter","countCurrency","parseInt","state","currencYDataSet","1","2","5","10","20","50","100","200","500","2000","curr","i","length","withdraw","push","bind","this","isEnabled","type","onChange","onClick","disabled","Component","App","Form","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c30365aa.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Info(props) {\r\n    const { details } = props;\r\n    function sum() {\r\n        var sum = 0;\r\n        for( var el in details.counterObj ) {\r\n          if( details.counterObj.hasOwnProperty( el ) ) {\r\n            sum += parseFloat( details.counterObj[el] );\r\n          }\r\n        }\r\n        return sum;\r\n      }\r\n          \r\n      var sample = { a: 1 , b: 2 , c:3 };\r\n      var summed = sum( sample );\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"col-md-6\">\r\n                <h6>You will get the following amount</h6>\r\n                <ul className=\"list-group\">\r\n                    {Object.entries(details.counterObj).map(function ([item, count], index) {\r\n                        return <li key={index}><span className=\"unit pr-2\">{count}</span>notes of Rs <span className=\"value pl-1\">{item}</span></li>\r\n                    })}\r\n                </ul>\r\n                <h6>Total notes dispensed: {summed}</h6>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Info from \"./Info\";\r\n\r\nexport class form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.hanleClicked = this.hanleClicked.bind(this);\r\n    this.state = {\r\n      amount: \"\",\r\n      counterObj: {},\r\n      noteCounter: {}\r\n    };\r\n  }\r\n  // TO INPUT VALUE\r\n  handleChange = e => {\r\n    e.preventDefault();\r\n    this.setState({ amount: e.target.value });\r\n  };\r\n  hanleClicked = e => {\r\n    setTimeout(() => {\r\n      this.setState({\r\n        noteCounter: this.countCurrency(parseInt(this.state.amount)),\r\n        amount: parseInt(this.state.amount)\r\n      });\r\n      // console.log(this.state.noteCounter);\r\n      let currencYDataSet = {\r\n        1: 0,\r\n        2: 0,\r\n        5: 0,\r\n        10: 0,\r\n        20: 0,\r\n        50: 0,\r\n        100: 0,\r\n        200: 0,\r\n        500: 0,\r\n        2000: 0\r\n      };\r\n      this.state.noteCounter.map((item, index) => {\r\n        if (currencYDataSet.hasOwnProperty(item)) {\r\n          return currencYDataSet[item] += 1;\r\n        } else {\r\n          return currencYDataSet[item] = 1;\r\n        }\r\n      });\r\n      this.setState({\r\n        counterObj: currencYDataSet\r\n      })\r\n      // console.log(this.state.counterObj);\r\n    }, 200);\r\n  };\r\n  countCurrency = amount => {\r\n\r\n    let curr = [1, 2, 5, 10, 20, 50, 100, 200, 500, 2000];\r\n    let i = curr.length - 1,\r\n      withdraw = [];\r\n\r\n    while (amount !== 0) {\r\n      if (amount >= curr[i]) {\r\n        withdraw.push(curr[i]);\r\n        amount -= curr[i];\r\n      }\r\n      if (amount < curr[i]) {\r\n        i--;\r\n      }\r\n    }\r\n    return withdraw;\r\n  };\r\n  render() {\r\n    const { amount } = this.state;\r\n    const isEnabled = amount.length;\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"col-md-6\">\r\n          <form className=\"form\">\r\n            <h3 className=\"text-center\">Welcome to ATM</h3>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"number\"\r\n                className={`form-control ${amount ? \"float-label-up\" : \"\"}`}\r\n                value={amount}\r\n                onChange={this.handleChange}\r\n              />\r\n              <label className=\"float-label\">Enter the Amount</label>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-lg\"\r\n                onClick={this.hanleClicked}\r\n                disabled={!isEnabled}\r\n              >\r\n                Get Money\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <Info details={this.state} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default form;\r\n","import React from 'react';\nimport './App.css';\nimport Form from './components/Form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"header text-center p-3 text-light mb-4\">\n        <h1>ATM Money Dispenser</h1>\n      </header>\n      <div className=\"wrapper\">\n        <div className=\"row\">\n          <Form />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}